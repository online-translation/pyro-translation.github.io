{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# 加载一些重要的依赖\n",
    "import torch\n",
    "from torch.autograd import Variable\n",
    "\n",
    "import pyro\n",
    "import pyro.distributions as dist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pyro里的模型：从原分布到随机函数\n",
    "\n",
    "Pyro项目的这个基础模块叫做 _随机函数_。这是一个包含两种基本要素的Python函数。\n",
    "\n",
    "- 确定性Python代码；和\n",
    "- 随机原函数\n",
    "\n",
    "具体而言，一个随机函数就是一个包含`__call__()`方法的Python对象，就像一个函数，一种方法，或者一个PyTorch的`nn.Module`。\n",
    "\n",
    "在这个教程和文档里，我们通常把随机函数称为**模型**，因为随机函数也可以被用来表示一个数据生成的简单或者抽象的过程描述。用随机函数来表征模型在Pyro中通常意味着模型能够像其他通用的Python函数一样被重组、复用、载入和序列化。\n",
    "\n",
    "话不多说，让我们开始介绍我们第一个基础的元件：随机原函数：\n",
    "\n",
    "\n",
    "## 随机原函数\n",
    "\n",
    "随机原函数，也叫分布函数，就是一类重要的随机函数，我们能够显式计算给定输入的概率。Pyro自带一个独立的[函数库](http://docs.pyro.ai/distributions.html), 'pyro.distribution'。这是一个基于PyTorch构建的GPU加速的多变量概率分布函数库，提供多种分布函数族，例如：伯努利分布、均匀分布。用户也能够使用子类`pyro.distributions.Distribution`来构造经典的分布。\n",
    "\n",
    "使用随机原函数是非常简单的。例如，从一个标准正态分布$\\mathcal{N}(0,1)$中抽取一个样本`x`,我们只需要像下面这样做："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable containing:\n",
      " 1.6869\n",
      "[torch.FloatTensor of size 1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mu = Variable(torch.zeros(1))   # 均值为0\n",
    "sigma = Variable(torch.ones(1)) # 单位方差\n",
    "x = dist.normal(mu, sigma)      # x 是分布 N(0,1)的一个样本\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "注意，`dis.normal`是一个带参数的 _函数_，`dist.normal(...)`返回一个样本。需要注意的是，传递给`dist.normal`的参数需要是PyTorch的`Variable`.这是必要的因为我们想利用PyTorch快速张量计算和自动求导能力。为了求样本`x`的值，例如根据分布$\\mathcal{N}(0,1)$计算他的log概率值，我们只需要这样做："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable containing:\n",
      "-2.3417\n",
      "[torch.FloatTensor of size 1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "log_p_x = dist.normal.log_pdf(x, mu, sigma)\n",
    "print(log_p_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "注意，传递到方法`log_pdf`的参数有：需要求值的变量（例如`x`）,接下来是这个分布函数的参数（例如`mu`和`sigma`）。\n",
    "\n",
    "## 原函数 `pyro.sample`\n",
    "\n",
    "`pyro.sample`是Pyro众多核心语法(the core language primitives)中的一个。使用`pyro.sample`就像调用一个随机原函数那样简单，但是有一个重要的差异："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable containing:\n",
      "-0.8290\n",
      "[torch.FloatTensor of size 1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "x = pyro.sample(\"my_sample\", dist.normal, mu, sigma)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "正如直接调用 `dist.normal`，这里也会返回一个从标准正态分布中抽取的样本。关键的不同点在于：这个样本 _被命名_了。Pyro的后端使用这些名字来唯一标识样本，并且根据这些闭包随机函数被使用的方式来 _在运行时改变_ 他们的行为。我们将会看到，这是Pyro能够实现在推断算法上做多重操作的原因。 \n",
    "\n",
    "我们已经展示了`pyro.sample`是如何和像`dist.normal`这样的随机原函数进行交互的。这和任意其他随机函数`fn()`没什么不同。例如我们可能会有这样的代码:\n",
    "\n",
    "```python\n",
    "x = pyro.sample(\"my_sample\", fn, arg1, arg2)\n",
    "```\n",
    "\n",
    "这将创建一个被命名的mysample，且从函数`fn`中以`arg1` 和 `arg2`为参数进行采样得到的样本。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 一个简单的模型\n",
    "\n",
    "到目前为止我们已经介绍了`pyro.sample` 和 `pyro.distributions`，我们已经能够编写一个简单的模型了。正是我们对真实世界建模的渴望驱使着我们对概率编程产生狂热的兴趣，那么我们选择一个具体的案例吧。\n",
    "\n",
    "假设我们有一堆日气温平均值和天气的数据，我们想知道气温和晴天或多云天气之间是如何关联的。一个简单的随机函数如下所示："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('sunny', 62.1190299987793)\n",
      "('cloudy', 58.74806213378906)\n",
      "('sunny', 79.73405456542969)\n"
     ]
    }
   ],
   "source": [
    "def weather():\n",
    "    cloudy = pyro.sample('cloudy', dist.bernoulli, \n",
    "                         Variable(torch.Tensor([0.3])))\n",
    "    cloudy = 'cloudy' if cloudy.data[0] == 1.0 else 'sunny'\n",
    "    mean_temp = {'cloudy': [55.0], 'sunny': [75.0]}[cloudy]\n",
    "    sigma_temp = {'cloudy': [10.0], 'sunny': [15.0]}[cloudy]\n",
    "    temp = pyro.sample('temp', dist.normal,\n",
    "                       Variable(torch.Tensor(mean_temp)), \n",
    "                       Variable(torch.Tensor(sigma_temp)))\n",
    "    return cloudy, temp.data[0]\n",
    "\n",
    "for _ in range(3):\n",
    "    print(weather())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "让我们一行行的来看这些代码。首先，在2-3行，我们使用了`pyro.sample`来定义一个二值随机变量'coudy'，这是从参数为0.3的伯努利分布中抽取的一个样本。由于伯努利分布只会返回`0`和`1`，在第4行我们把'coudy'的值转换成一个字符串，这样'weather'函数的返回值就变得容易理解。依照我们定义的模型，30%的概率会是多云天气，70%的天气会是晴天。\n",
    "\n",
    "在5-6行，我们定义了在7-9行用来采样温度的参数。这些参数依赖于我们在第二行采样的`cloudy`的特定值。比如，多云天气的平均温度是55度（华氏），晴天的平均温度是75度。最后，在第10行我们返回两个值 `coudy`和`tmp`。\n",
    "\n",
    "`weather()`是一个返回两个随机样本的非确定性python函数。因为随机性是由`pyro.sample`激发的，然而它的意义远不止如此。确切的说，`weather()`指代了定义在两个被命名的随机变量`cloudy` 和 `temp`的联合概率分布。因此，这个过程即在定义一个我们可以使用概率理论进行推理的概率模型。例如我们可能会问，如果我观测到了一个70度的气温，多云天气的可能性有多大？如何形式化，并且解答这类问题是下一个教程的主题。\n",
    "\n",
    "我们已经知道如何定义一个简单的模型，而基于这个模型做进一步构造也是非常容易的。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ice_cream_sales():\n",
    "    cloudy, temp = weather()\n",
    "    expected_sales = [200] if cloudy == 'sunny' and temp > 80.0 else [50]\n",
    "    ice_cream = pyro.sample('ice_cream', dist.normal, \n",
    "                            Variable(torch.Tensor(expected_sales)),\n",
    "                            Variable(torch.Tensor([10.0])))\n",
    "    return ice_cream"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这类大多数开发者一定很熟悉的模块化代码显然是非常强大的。但是它是否强大到能够构建我们想要表达的任何一种模型呢？\n",
    "\n",
    "## 普适性：随机递归、高阶随机函数和随机控制流\n",
    "\n",
    "Pyro是基于python的，它定义的随机函数能够包含任意复杂的确定性python代码，而随机性也能够自如的作用到控制流中。例如，我们能够构造一种非确定性终止递归的递归函数，而且我们可以在任何调用时刻传递一个唯一的样本标识符给`pyro.sample`。例如我们可以像这样定义一个几何分布："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable containing:\n",
      " 0\n",
      "[torch.FloatTensor of size 1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def geometric(p, t=None):\n",
    "    if t is None:\n",
    "        t = 0\n",
    "    x = pyro.sample(\"x_{}\".format(t), dist.bernoulli, p)\n",
    "    if torch.equal(x.data, torch.zeros(1)):\n",
    "        return x\n",
    "    else:\n",
    "        return x + geometric(p, t+1)\n",
    "    \n",
    "print(geometric(Variable(torch.Tensor([0.5]))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "需要注意的是，`x_0`, `x_1`等变量是在 `geometric()` 中被动态创建的，并且不同的执行过程会产生不同数量的随机变量。\n",
    "\n",
    "我们还可以随意的定义能够以随机函数作为参数或者返回随机函数的随机函数："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable containing:\n",
      " 0.8229\n",
      "[torch.FloatTensor of size 1]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def normal_product(mu, sigma):\n",
    "    z1 = pyro.sample(\"z1\", dist.normal, mu, sigma)\n",
    "    z2 = pyro.sample(\"z2\", dist.normal, mu, sigma)\n",
    "    y = z1 * z2\n",
    "    return y\n",
    "\n",
    "def make_normal_normal():\n",
    "    mu_latent = pyro.sample(\"mu_latent\", dist.normal, \n",
    "                            Variable(torch.zeros(1)), \n",
    "                            Variable(torch.ones(1)))\n",
    "    fn = lambda sigma: normal_product(mu_latent, sigma)\n",
    "    return fn\n",
    "\n",
    "print(make_normal_normal()(Variable(torch.ones(1))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " `make_normal_normal()` 就是一个以一个随机函数作为输入，同时执行之后会产生三个带标识符的随机变量的随机函数。\n",
    "\n",
    "Pyro支持把任意类型的Python代码，比如：迭代、递归、高阶函数等等，与随机控制流结合的特性意味着Pyro的随机函数是普适的。例如他们能够用来表示任意一个可计算的分布。我们将在接下来的教程中领略Pyro这一特性难以置信的强大之处。\n",
    "\n",
    "这里需要说明Pyro以Pytorch为引擎的一个理由：Pytorch提供的动态计算图是构建基于GPU加速的通用张量模型的重要基础。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 下一步\n",
    "\n",
    "到目前为止我们已经展示了如何在Pyro中使用随机函数以及原分布来搭建模型。为了能够从数据中学习模型，并且基于模型进行推导，我们需要进行推断。这就是我们[下一个教程](https://online-translation.github.io/pyro-translation.github.io/intro_part_ii.html)的主题。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
